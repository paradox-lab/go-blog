*****************************
后台管理系统
*****************************

:gin-vue-admin: https://www.gin-vue-admin.com/

:github: https://github.com/flipped-aurora/gin-vue-admin

:gitee: https://gitee.com/pixelmax/gin-vue-admin

GIN-VUE-ADMIN是一个基于vue和gin开发的全栈前后端分离的开发基础平台，拥有jwt鉴权，动态路由，动态菜单，casbin鉴权，表单生成器，代码生成器等功能，提供了多种示例文件，让大家把更多时间专注在业务开发上。

研究了下，是提供了一些curd的代码生成功能，并不是类似django的自动后台管理系统，不过也可以学习下里面的源码

变更表结构
=====================================

更改完model后，直接在main.py文件注释掉run，然后临时加上这段代码

.. code-block:: go

	err := global.MG_DB.AutoMigrate(
		awesome.AweList{},  // 假设变更是是这张表
	)
	if err != nil {
		fmt.Println(err)
	}

学习笔记
======================================

关于配置文件
---------------------------------------

配置文件使用viper库，以yaml格式作为配置文件，在前端初始化数据库配置后，将新的
配置项写入到yaml文件

关于jwt
----------------------------------------

**go的做法**

api目录的sys_user.go的Login方法使用到了jwt验证token

**vue的做法**

登录时：
调用store\module\user.js的LoginIn函数，里面登录成功后，将后端返回的token存储到store中。

登录后的请求:
在utils/request.js中用axios封装了请求，每次请求尝试从store中提取token信息，然后附在请求中发送到后端

关于动态菜单树
=====================================

api接口: http://localhost:8888/menu/getMenu

第一步: 根据token获取用户id
第二步: 根据用户id从后台菜单表获取该用户下所有菜单
第三步: 从所有菜单中提取出顶层菜单
第四步: 根据顶层菜单归类，形成一个树状的切片
第五步: json格式返回给前端

BUG
======================================

api管理界面，点击编辑报错

