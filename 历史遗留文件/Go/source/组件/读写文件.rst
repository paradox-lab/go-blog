****************************
读写各种格式文件
****************************

.. highlights:: go

读写json格式
============================

处理json格式需要先定义好结构体::

    // Animal 定义json结构体
    type Animal struct {
        Name  string
        Order string
    }

读::

    // 打开Json配置文件
    file, err := os.Open("file.json")
    if err != nil {
        fmt.Println("打开文件错误", err.Error())
    }

    defer file.Close()

    // 读取文件数据
    jsonBlob, _:=ioutil.ReadAll(file)

    var animals []Animal

    // Json解码
    err := json.Unmarshal(jsonBlob, &animals)
    if err != nil {
        fmt.Println("error:", err)
    }

    fmt.Printf("%+v", animals)

读写xlsx格式
============================

依赖的第三方库

* `excelize`_

.. _excelize: https://xuri.me/excelize/zh-hans/

**演示代码的前置动作**

.. code-block:: go

    import (
        "github.com/360EntSecGroup-Skylar/excelize/v2"
    )

读取xlsx
----------------------------

.. _打开文件:

打开文件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: go

    f, err := excelize.OpenFile("Book1.xlsx")
    if err != nil {
        fmt.Println(err)
        return
    }

读取工作表指定单元格的值
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: go

    cell, err := f.GetCellValue("Sheet1", "B2")
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(cell)

读取工作表所有单元格
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: go

    rows, err := f.GetRows("Sheet1")
    for _, row := range rows {
        for _, colCell := range row {
            fmt.Print(colCell, "\t")
        }
    }


