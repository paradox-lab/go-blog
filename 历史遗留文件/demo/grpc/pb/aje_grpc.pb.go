// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aje

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeleniumClient is the client API for Selenium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeleniumClient interface {
	UploadJdCfst(ctx context.Context, in *RunRequst, opts ...grpc.CallOption) (*RunReply, error)
}

type seleniumClient struct {
	cc grpc.ClientConnInterface
}

func NewSeleniumClient(cc grpc.ClientConnInterface) SeleniumClient {
	return &seleniumClient{cc}
}

func (c *seleniumClient) UploadJdCfst(ctx context.Context, in *RunRequst, opts ...grpc.CallOption) (*RunReply, error) {
	out := new(RunReply)
	err := c.cc.Invoke(ctx, "/aje.Selenium/UploadJdCfst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeleniumServer is the server API for Selenium service.
// All implementations must embed UnimplementedSeleniumServer
// for forward compatibility
type SeleniumServer interface {
	UploadJdCfst(context.Context, *RunRequst) (*RunReply, error)
	mustEmbedUnimplementedSeleniumServer()
}

// UnimplementedSeleniumServer must be embedded to have forward compatible implementations.
type UnimplementedSeleniumServer struct {
}

func (UnimplementedSeleniumServer) UploadJdCfst(context.Context, *RunRequst) (*RunReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadJdCfst not implemented")
}
func (UnimplementedSeleniumServer) mustEmbedUnimplementedSeleniumServer() {}

// UnsafeSeleniumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeleniumServer will
// result in compilation errors.
type UnsafeSeleniumServer interface {
	mustEmbedUnimplementedSeleniumServer()
}

func RegisterSeleniumServer(s grpc.ServiceRegistrar, srv SeleniumServer) {
	s.RegisterService(&Selenium_ServiceDesc, srv)
}

func _Selenium_UploadJdCfst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeleniumServer).UploadJdCfst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aje.Selenium/UploadJdCfst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeleniumServer).UploadJdCfst(ctx, req.(*RunRequst))
	}
	return interceptor(ctx, in, info, handler)
}

// Selenium_ServiceDesc is the grpc.ServiceDesc for Selenium service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Selenium_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aje.Selenium",
	HandlerType: (*SeleniumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadJdCfst",
			Handler:    _Selenium_UploadJdCfst_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aje.proto",
}
