********************************
命令行工具
********************************

依赖的第三方库

* `argparse`_ 类似于Python的argparse

.. _argparse: https://github.com/akamensky/argparse

**演示代码的前置动作**

.. code-block:: go

    import (
        "github.com/akamensky/argparse"
    )

创建解析器
====================================================

.. code-block:: go

    parser := argparse.NewParser("工具名称", "工具功能的描述")

创建入参标志
====================================================

字符串参数
----------------------------------------------------

.. code-block:: go

    var myString *string = parser.String("s", "string", &argparse.Options{})

usage: `progname --string "String content"`

指定可选字符串参数
---------------------------------------------------

.. code-block:: go

    var mySelector *string = parser.Selector("d", "debug-level", []string{"INFO", "DEBUG", "WARN"}, &argparse.Options{})

usage: `progname --debug-level WARN`

字符串切片参数
------------------------------------------------------

.. code-block:: go

    var myStringList *[]string = parser.StringList("s", "string", &argparse.Options{})

usage: `progname --string hostname1 --string hostname2 -s hostname3`

.. note::

    List是StringList的别名: `var myList *[]string = parser.List("H", "hostname", &argparse.Options{})`

Flag
------------------------------------------------------

Flag告诉你flag是否被传入到命令行(true表示设置，false相反)

.. code-block:: go

    var myFlag *bool = parser.Flag("f", "force", ...)

usage: `progname --force`

FlagCounter
------------------------------------------------------

收集传入flag命令的次数

.. code-block:: go

    var myFlagCounter *int = parser.FlagCounter("v", "verbose", &argparse.Options{})

usage: `progname -vv --verbose`

.. warning::

    感觉是官方写错了，应该是 `progname -v --verbose`, 有时间验证一下

数值型参数
----------------------------

.. code-block:: go

    var myInteger *int = parser.Int("i", "integer", &argparse.Options{})

usage: `progname --integer "42"`

.. seealso::

    类似Int，切片

浮点值参数
------------------------------------

.. code-block:: go

    var myFloat *float64 = parser.Float("f", "float", &argparse.Options{})

usage: `progname --float "37.2"`

.. seealso::

    类似Float，切片

File
-----------------------------------

验证文件是否存在并尝试打开

.. code-block:: go

    var myLogFile *os.File = parser.File("l", "log-file", os.O_RDWR, 0600, &argparse.Options{})

usage: `progname --log-file /path/to/file.log`

.. seealso::

    类似File，切片

可选项参数argparse.Options
====================================

* Required - 是否为必填项
* Validate - 验证Value
* Help - 帮助文档
* Deault - 默认值

解析用户传入参数并执行对应的函数
===================================

.. code-block:: go

    // 解析用户传入参数
    err := parser.Parse(os.Args)
    if err != nil {
        fmt.Print(parser.Usage(err))
        return
    }
    // 执行对应函数
    if *mySelector == "INFO"{
        CallFunc1(*myString)
    } else if *mySelector == "WARN" {
        CallFunc2(*myString)
    }

子命令
====================================

可以使用command.NewCommand()来实现更深入的子命令。由于parser继承自command，所以每个命令都支持与parser本身完全相同的选项，
从而允许添加特定于该命令的参数或在parser本身上添加更多的全局参数!



